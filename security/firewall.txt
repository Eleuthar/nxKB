
/usr/local/etc/$HOSTNAME.fw


***************
|     UFW     |
***************


ufw enable 

ufw disable 

ufw default allow|deny|reject [incoming|outgoing|routed]

ufw status numbered

ufw delete {{rule_number}}

ufw allow {{5432}} comment {{"Service"}}  

ufw allow proto {{tcp}} from {{192.168.0.4}} to {{any}} port {{22}}

ufw deny {{80}}    

ufw deny proto {{udp}} from {{any}} to {{any}} port {{22}}

ufw delete allow/deny <port>





**********************************
|     NETFILTER aka IPTABLES     |
**********************************


iptables -t [filter\nat\mangle\raw]

	-L chain
		\\ lists the rules in the chain. This is commonly used with the -n option to disable name resolution (for example, iptables -n -L INPUT will display the rules related to incoming packets).

	-N chain
		\\ creates a new chain. You can create new chains for a number of purposes, including testing a new network service or fending off a network attack.

	-X chain
		\\ deletes an empty and unused chain (for example, iptables -X ddos-attack).

	-A chain rule
		\\ adds a rule at the end of the given chain. Remember that rules are processed from top to bottom so be sure to keep this in mind when adding rules.

	-I chain rule_num rule
		\\ inserts a rule before the rule number rule_num. As with the -A option, keep the processing order in mind when inserting new rules into a chain.

	-D chain rule_num || chain rule
		\\ deletes a rule in a chain; the first syntax identifies the rule to be deleted by its number (iptables -L --line-numbers will display these numbers), while the latter identifies it by its contents.

	-F chain 
		\\flushes a chain (deletes all its rules). For example, to delete all of the rules related to outgoing packets, you would run iptables -F OUTPUT. If no chain is mentioned, all the rules in the table are deleted.

	-P chain action
		\\ defines the default action, or "policy" for a given chain; note that only standard chains can have such a policy. To drop all incoming traffic by default, you would run iptables -P INPUT DROP.


# iptables -L -n
	\\ list all rules, no DNS resolution
	
	
# iptables -A INPUT -s 10.0.0.0/8 -j ACCEPT
	\\ add input policy to accept all from source
	
	
# iptables -A OUTPUT -p tcp --dport 25 -j REJECT
# nc -vz smtp.office365.com 25
	\\ reject traffic to port 25 && test rule
	
	

STATEFUL FIREWALL
`````````````````````````

# iptables -I INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT

# iptables -P INPUT DROP


	
NAT
``````

# echo "1" > /proc/sys/net/ipv4/ip_forward
	\\ non-persistent ip forwarding
OR
# echo "net.ipv4.ip_forward=1" >>  /etc/sysctl.conf
	\\ persistent ip forwarding

# sysctl -a
	\\ show all /proc flags

iptable
# iptables -t nat -A POSTROUTING -o enp0s3 -s 192.168.99.0/24 -j MASQUERADE
	\\ source NAT: translate private IP  to public IP
	
	
# iptables -t nat -F POSTROUTING
# iptables -t filter -F INPUT
	\\ flush rules
	

# iptables -t nat -L -n
	\\ nat table
	
	
	
DNAT
````````	
	
# iptables -t nat -A PREROUTING -i enp0s3 -p tcp --dport 222 -j DNAT --to-destination 192.168.99.10:22	
	\\ server must be configured for port forwarding by editing rule: different input port > needed tunnelling port