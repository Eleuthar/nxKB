HANDSHAKE PROTOCOL
``````````````````````
Q --> ClientHello containing a list of items supported by the client: 
    * SSL\TLS version
    * Cryptographic algorithms
    * Data compression methods
    
Z --> ServerHello:
    * Crypto algo from client list, chosen by server
    * Session ID
    * Digital cert
    * Public key
    
Q --> verify CA & ClientKeyExchange
    * share secret symmetric key using Z public key
    * send Finished txt encrypted with new secret key
 
Z --> send Finished txt to client, encrypted with symmetric key, to indicate handshake is complete



DIGITAL SIGNATURE FLOW
````````````````````````
Q write plaintext & attach certificate to digitally signed text
    > create digest of the text for integrity 
        > encrypt digest with private key == digital signature
            > send plaintext & digital signature
            
Z decrypts digest with Q.public key, if fail, text is not from Q.
    > create digest of plaintext with hash algorithm
        > compare both digest, if fail, the plaintext is changed in transit



DIGITAL CERTIFICATE FLOW
```````````````````````````
Q send req for Z
    > Z reply with public key & SSL cert
        > Q check CA digital signature
            > Q generate symmetric key (shared secret), encrypts with Z public key & send it to Z
                > Z decrypts symmetric key and continues communication using only the shared key



SIGNING
````````

\\ initial self signed root CA
\\ -nodes == DO NOT encrypt private key with pvd 
$ openssl req -new -x509 -sha256 -nodes -days 3650 -newkey rsa:2048 -keyout  privateKey.key -out certificate.crt


\\ sign intermediate SERVER CSR
$ openssl x509 -req -days 9999 -in server-csr.pem -CA ca-crt.pem -CAkey ca-key.pem -CAcreateserial -out server-crt.pem


\\ export client cert
$ openssl pkcs12 -export -inkey user.key -in user.pem -certfile user.pem -out testkeystore.p12


\\ export public key
openssl x509 -in certificate.pem -pubkey -noout > public_key.pem


\\ generate CLIENT key + csr
$ openssl req -new -newkey rsa:2048 -subj "/CN=YOUR_NAME/" -keyout uzr.key -out uzr.csr -nodes -sha256


\\ sign CLIENT certificate
$ openssl x509 -CA THEIR_CA_ROOT.crt -CAkey THEIR_CA_PRIVATE.key -req -in YOUR_REQUEST.csr -out YOUR_CERTIFICATE.crt -days 3650


\\ verify
$ openssl verify -CAfile ca-crt.pem client1-crt.pem


\\ view cert signer
$ openssl x509 -in pubcert.pem -noout -issuer -issuer_hash


\\ view cert hash value
$ openssl x509 -hash -in pubcert.pem -noout



@nginx
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ssl_client_certificate /path/to/ca.pem;
ssl_verify_client on
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

