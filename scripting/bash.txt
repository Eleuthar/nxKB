DEBUGGING
READ PARAM
ARGUMENTS
IF
INTEGER ARITHMETIC
NON-INTEGER ARITHMETIC
SQUARE ROOT
CASE
ARRAY
WHILE
FOR
SELECT
FUNCTION
HERE DOCUMENT
SQUARE BRACKETS



<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


  

*********************
|     DEBUGGING     |
*********************

 
bash -x <script>
	 // debug verbose
 
 
#!/bin/bash -x
	// edit shebang to display code while running script    
 
 
set -x WITH set +x
	// activates & deactivates debugging from the point it is written    
    
    


 
****************************
|     READ PARAMETERS      |
****************************

 
read -p 'prompt_string :' <var>
	// user input on same line; if no <var>, input is stored in $REPLY
        
    
read -sp 'prompt_string :' <var>
	// secure password user input stored in <var>
    
 
read -a names
	// stores in array multiple input values separated by space
	// echo "names : ${names[0]}, ${names[1]}"


while read inputFile
do
    echo $inputFile
done < [file]
 
 
    OR
 
    
cat [file] | while read inputFile
do
    echo $inputFile
done    
    
 
    OR
    
    
while IFS=' ' read -r inputFile
    // assign a blank space to IFS [internal field separator]
    // -r prevents interpretation of escapes
do
    echo $inputFile
done < [file]   
    

 
VARIABLE
~~~~~~~~

# var="value"
# export var
	\\ good practice to create local shell env var, no one-liner
	
	
# declare -x var="value"
	\\ export global shell env var
	
		
# ( export var="value" )
	\\ set env var to subshell
	

# env var="value"
	\\ set env variable value without setting in the current session
	
	
# env -i bash
	\\ clear environment for a process
	
	
# builtin cat /etc/fstab
	\\ force use a builtin command instead of alias
	
	
# set
	\\ display all bash var+value & functions
	
	
# set value1 value2 value3 ($1 $2 $3)
	\\ set values to positional parameter
	
$!
	\\ PID of last child process
	
$$
	\\ PID of running shell
	
$?
	\\ last command return code

# set
	\\ list all variables
	

# env
	\\ list all exported variables
		
	
# [qQ] || [0-9]
	\\ regex range of value, only 1 selected
	
	
# {ztr1,ztr!}ng
	\\ generate list of name with common stem, ex:ztr1ng, ztr!ng
	
	
# ' '
	\\ cancel meaning of all metachar except "\"
	
	
# " "
	\\ cancel most of the special meaning char except: |, \, $var
	
	
# ` ` OR $()
	\\ execute command enclosed & return output; used only in between " "
	
	
# !!
	\\ rerun last command
	
	
# exec <cmd>
	\\ doesn't start a sub-process, rather replace the process \ current shell used to start it



 
********************************
|      INTEGER ARITHMETIC      |
********************************
 

num1=55
num2=77
 
echo $(( num1 +-/*% num2 ))
    OR
echo $(expr num1 +-/% num2 )
    // * must be escaped
 
 
 


************************************
|      NON-INTEGER ARITHMETIC      |
************************************


num1=55.5
num2=77.7
 
echo "55.5 +-*% 5" | bc
 
echo "scale=2;55.5/4.5" | bc
	// division must be used with scale, indicating the number of decimals after floating point
 
 



*************************
|      SQUARE ROOT      |
************************* 

 
echo "scale=2;sqrt($num1)" | bc -l
 
echo "scale=2;3^3" | bc -l
 
	// -l loads the library containing high level math functions
    
    

 

******************
|      CASE      |
****************** 
    
    
case $var in
    [a-z] )
        echo "$var" ;;

    [A-Z] )
        echo "$var" ;;

    [0-9] )
        echo "$var" ;;

    ? )
        echo "$var" ;;

    * )
        echo "other default" ;;
esac
    
    


    
*******************
|      ARRAY      |
******************* 
    
     
os=('ubuntu' 'mac' 'winbloz')
 
 
os[2]='new_element'
	// add new element at index
    
 
unset os[2]
	// remove the index
    
 
echo "${os[@]}"
    // print all index numbers
    
 
echo "${os[2]}"
    // print individual element
    
 
echo "${!os[@]}"
    // prints element index number
    
 
echo "${#os[@]}"
    // print array length
    
 
stringVar=oneLengthyString
 
echo "${stringVar[@]}"
    // will print the entire string, treated as unique index
    
     



*******************
|      WHILE      |
******************* 
 

n=1
 
while [ $n -le 10 ]
        
	OR

while (( $n <= 10 ))
do
    echo "$n"
    n=$(( n+1 ))
        // OR
    (( n++ ))
done
 
    
*****************
|      FOR      |
***************** 
 
for VAR in 1 2 3 4 5 6
    
	
for VAR in {START..END..INCREMENT}
   
	
for VAR in *
 
    
for (( i=0; i<10; i++ ))

do
    ...
done
 
 



********************
|      SELECT      |
********************
 

select NAME in name1 name2 name3
do
    case $NAME in
    name1)
        echo "name1 selected" ;;

    name2)
        echo "name2 selected" ;;

    name3)
        echo "name3 selected" ;;

    *)
        echo "non existing option"
    esac
done
 
    // outputs a menu structure with the list elements in an ordered sequence, prompting for option selection
    // usable with cases
 
 
 
***********************
|      FUNCTIONS      |
***********************

 
function Hello(){
    local name=$1
	        // localize $name to protect other $name global var
    echo "Hello $name"
}



 
 
*************************
|     HERE DOCUMENT     |
*************************
 
// append\output from CLI; EOF can be replaced with any tag word or marker
 
$ cat\more\less <<EOF >> [file]
[one line string]
[one line string]
[one line string]
EOF
 



 
***************************
|     SQUARE BRACKETS     |
***************************

 
{ #<string> }
    // lop off beginnging of string
 
 
{ %<string> }
    // lop off end of string
	
	
	

INTERACTIVE LOGIN BASH
~~~~~~~~~~~~~~~~~~~~~~

# bash --login
	OR
# su - <uzr>
	
	* /etc/profile executed first (system-wide env setting)
	
	* ~/.bash_profile contains individual uzr setting
	
		* ~/.bash_login executed if bash_profile doesn't exist
		
		* ~/.profile executed if bash_login doesn't exist
		
		
	
NON-INTERACTIVE NON-LOGIN bash
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* read file from BASH_ENV
	* if BASH_ENV doesn't exist, read ENV
	
	
# sh -c <cmd>
	\\ create non-interactive shell
	
	

INTERACTIVE NON-LOGIN BASH
~~~~~~~~~~~~~~~~~~~~~~~~~~
# su <uzr>
	OR
# bash -c <cmd>
	* ~/.bashrc executed when started
		


EXTRA FILES
~~~~~~~~~~~
/etc/inputrc
	\\ system bash line editing config
	
	
~/.inputrc
	\\ individual bash line editing config
	
	
~/.bash_logout
	\\ executed on shell exit
	



BASH SCRIPTING
~~~~~~~~~~~~~~~

# set -o noclobber
	\\ prevents redirection ">" to fail, preventing content overwrite


# <binary> | mail -s "<subject>" <destination_mail_address>
	\\ optional msg body ending cmd with "<<EOM *text* EOM
	
	
$n = positional param, n <= 9

${nn} 	= positional param, n <= 99

$# 		= arg count

$@, $*  = arg array

"$@" 	= "$1" "$2" ... "$n"

"$*" 	= "$1c$2c$3c...$n", where c = $IFS (default is space)

$? 		= status of last command

$$		= PID of current shell

$- 		= current options in effect

$		= name of current shell

# shift	
	\\ moves assignment of param to the left, removing the first left-hand param

$_ 
	// last argument of the previous command


	

TEST FILE OPERATOR
~~~~~~~~~~~~~~~~~~~

# if test <expression> == if [ expression ]

-a <file> True if file exists.

-b <file> True if file exists and is a block special file.

-c <file> True if file exists and is a character special file.

-d <file> True if file exists and is a directory.

-e <file> True if file exists.

-f <file> True if file exists and is a regular file.

-g <file> True if file exists and is set-group-id.

-h <file> True if file exists and is a symbolic link.

-k <file> True if file exists and its ``sticky'' bit is set.

-p <file> True if file exists and is a named pipe (FIFO).

-r <file> True if file exists and is readable.

-s <file> True if file exists and has a size greater than zero.

-t <fd> True if file descriptor fd is open and refers to a terminal.

-u <file> True if file exists and its SUID bit is set.

-w <file> True if file exists and is writable.

-x <file> True if file exists and is executable.

-O <file> True if file exists and is owned by the effective UID.

-G <file> True if file exists and is owned by the effective GID.

-L <file> True if file exists and is a symbolic link.

-S <file> True if file exists and is a socket.

-N <file> True if file exists and has been modified since it was last read.

file1 -nt file2 True if file1 is newer (according to the modification date) than file2, or if file1 exists
and file2 does not.

file1 -ot file2 True if file1 is older than file2, or if file2 exists and file1 does not.

file1 -ef file2 True if file1 and file2 refer to the same device and inode numbers.


# binaryExec 2> error.txt
	\\ stderr redirect to file
	

# binaryExec &> out_and_err.txt
	\\ redirect stdout & stderr to the same file.