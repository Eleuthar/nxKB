\\ git object empty
$ rm -rf .git/objects/* .git/refs/heads/* .git/refs/remotes/* .git/refs/stash .git/refs/tags/*
$ git pull

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

$ ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
# add SSH key in account setting
$ eval "$(ssh-agent -s)"
$ ssh-add ~/.ssh/<qname>
$ ssh -T git@github.com


git clone -c core.sshCommand="/usr/bin/ssh -i /home/me/.ssh/id_rsa_foo" git@github.com:me/repo.git



REPO MANAGEMENT
`````````````````
$ git init
$ git remote add <alias> <url>
$ git pull
    \\ refresh main branch
    
$ git add .
$ git commit -m "change comment"

$ git branch -v
    \\ show all branches, current branch marked by asterisk    
    
$ git checkout <branch>
    \\ switch to branch
    OR
$ git checkout -b <branch>
	\\ make & switch to new branch
    
$ git rebase main
    \\ level branch on top of main
    
$ git checkout main
	\\ move to main branch
	
$ git rebase <branch>
	\\ merge branch with main, rewrite history
	
$ git push


SQUASH
````````
Convert N commits into 1

$ git checkout <branch>
$ git rebase -i HEAD~3
	\\ operate on the last 3 commits back from HEAD
	\\ replace 'pick' with 'squash' on commit target, then refactor the commit message by commenting '#'


BISECT
````````
Mark commits as bad or good to narrow down the exact version a bug was introduced.

$ git log

$ get bisect start

$ git bisect good <commit ID>
	\\ mark commit as good
	
$ git bisect bad <commit ID>
	\\ mark commit as bad
	
$ git bisect reset
	\\ switch to the last working branch, default name "new-bisect"

$ git show <bad commit>
	\\ view changes of bugged commit

$ git revert <bad commit>


SPARSE CHECKOUT
`````````````````
$ mkdir <repo>
$ cd <repo>
$ git init
$ git remote add -f origin <url>
$ git config core.sparseCheckout true
$ echo "<dir path>" >> .git/info/sparse-checkout
$ git pull origin main


